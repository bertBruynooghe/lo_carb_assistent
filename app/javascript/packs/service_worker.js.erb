import { isNutrientFetch, fetchNutrients } from '../src/nutrients_fetch_handler.js'
import { isMealsFetch, fetchMeals } from '../src/meals_fetch_handler.js'

// <% routes = Rails.application.routes %>
// <% helpers = ActionController::Base.helpers %>

// TODO: only store assets that are needed for this client

// TODO: get rid of next line
const version = "<%%= ENV['SOURCE_VERSION'] || '3723' %>"

const assetsToCache = [
  '<%= helpers.asset_path "application.js" %>',
  '<%= helpers.asset_path "application.css" %>',
  '<%= helpers.image_path "maskable_icon_x48.png" %>',
  '<%= helpers.image_path "maskable_icon_x72.png" %>',
  '<%= helpers.image_path "maskable_icon_x96.png" %>',
  '<%= helpers.image_path "maskable_icon_x128.png" %>',
  '<%= helpers.image_path "maskable_icon_x192.png" %>',
  '<%= helpers.image_path "maskable_icon_x384.png" %>',
  '<%= helpers.image_path "maskable_icon_x512.png" %>',
  '<%= helpers.image_path "maskable_icon.png" %>',
  
  /*<%# next one gets resolved in the controller, 
        as it can't be resolved by erb at time of the webpacker compilation %> */
  '<%%= asset_pack_path "application.js" %>',
  '<%%= asset_pack_path "app.webmanifest.erb" %>',
  '<%%= asset_pack_path "meals-index.html.erb" %>',
  '<%%= asset_pack_path "meals-new.html.erb" %>'
]

const pagesToCache = {
  '<%= routes.path_for(controller: :nutrients, action: :index) %>': { Accept: 'text/html,application/xhtml+xml,application/xml' },
  [location.origin + '<%= routes.path_for(controller: :meals, action: :new) %>']: {}
}

function onInstall(e) {
  console.log('[ServiceWorker]', 'Installing!', version)
  e.waitUntil(
    Promise.all([
      ...Object.entries(pagesToCache)
        .map(async ([name, headers]) => {
          const cache = await caches.open(version)
          const request = new Request(name, { headers })
          // TODO: test HEAD first to see if we need to download 
          return cache.add(request)
        }),
      ...assetsToCache.map(async (name) => {
        const cache = await caches.open(name)
        const keys = await cache.keys()
        // only fetch if not already in cache
        if (!keys.length) return cache.add(name)
      })
    ]))
}

function onActivate(e) {
  console.log('[ServiceWorker]', 'Activating!', version) 
  e.waitUntil((async () => {
    const keys = await caches.keys()
    const keysToDelete = keys.filter(k => ![...assetsToCache, version].includes(k))
    await Promise.all(keysToDelete.map(k => caches.delete(k)))
  })())
}

const offlineHandler = async (request) => {
  // if it fails, try to return request from the cache
  const response = await caches.match(request)
  if (response) return response
  // if not found in cache, return default offline content for navigate requests
  if (request.mode === 'navigate' ||
    (request.method === 'GET' && request.headers.get('accept').includes('text/html'))) {
    // console.log('[ServiceWorker]', 'Fetching offline content')
    //<% path = routes.path_for(controller: :nutrients, action: :index) %>
    return await caches.match(new Request('<%= path %>', { headers: pagesToCache['<%= path %>'] }))
  }
}

async function onFetch(e) {
  const result = isNutrientFetch(e.request)
    ? fetchNutrients(e.request)
    : isMealsFetch(e.request)
    ? fetchMeals(e.request)
    : (new URL(e.request.url)).pathname === '/application.js'
    ? caches.match('<%%= asset_pack_path "application.js" %>') 
    : (new URL(e.request.url)).pathname === '/app.webmanifest'
    ? caches.match('<%%= asset_pack_path "app.webmanifest.erb" %>')
    : fetch(e.request).catch(() => offlineHandler(e.request))

  e.respondWith(result)
}

self.addEventListener('install', onInstall)
self.addEventListener('activate', onActivate)
self.addEventListener('fetch', onFetch)
