import { Controller } from '@hotwired/stimulus'

// import dbConnection from '../db_connection'

const mealsPath = '<%= Rails.application.routes.path_for(controller: :meals, action: :index) %>'
const dayMs = 24 * 60 * 60 * 1000
// TODO: get rid of ejs render in packs

const searchMap = () => location.search.substring(1).split('&')
    .map(token => token.split('='))
    .reduce((acc, [k,v]) => ({ ...acc, [k]: v }), {})

export default class extends Controller {
  static targets = ['tableBody', 'networkBusy', 'rowTemplate', 'nextWeek', 'previousWeek']

  async connect() {
    // const transaction = (await dbConnection).transaction('meals', 'readonly')
    // const meals = transaction.objectStore('meals')
    // const request = meals.count()
    // request.onsuccess = () => console.log('meals', request.result)

    // TODO: fix links etc.
    const result = await fetch(`${mealsPath}.json${location.search}`)
    if (!result.ok) return 

    const { week } = searchMap()

    const currentWeekDateValue = week ? new Date(week).valueOf() : Date.now() - 6 * dayMs

    this.networkBusyTarget.hidden = true

    const shortDateFormat = value => new Date(value).toISOString().split('T')[0]
    const mealsPathFor = value => `${mealsPath}?week=${shortDateFormat(value)}`
    this.previousWeekTarget.setAttribute('href', mealsPathFor(currentWeekDateValue - 7 * dayMs))
    this.nextWeekTarget.setAttribute('href', mealsPathFor(currentWeekDateValue + 7 * dayMs))
    this.nextWeekTarget.hidden = !week

    const rows = (await result.json()).reverse()
 
    // console.log('fetch', result.status, rows)
    rows.forEach(meal => { 
      const temp = this.rowTemplateTarget.content.cloneNode(true)
      Object.entries(meal).forEach(([k,v]) => {
        const elem = temp.querySelector(`[data-meals-target="${k}"]`)
        if (!elem) return
        elem.innerHTML = v
      })
      temp.querySelectorAll('td a').forEach(el => el.setAttribute('href', `${mealsPath}/${meal.id}`))
      temp.querySelector('[data-meal-target="deleteForm"]').setAttribute('action', `${mealsPath}/${meal.id}`)
      this.tableBodyTarget.prepend(temp)
    })
  }
}
